/**
 * Copyright 2019 michele@apache.org
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.massiccio.apigee.appdynamics.stats;

/**
 * Class used to compute environment statistics.
 */
public class EnvironmentRatio extends ApiRatio {

    // =========================================================================
    // Constructor
    // =========================================================================

    /**
     * Creates a new EnvironmentRatio object.
     *
     * @param api The organization and environment, e.g.,
     * inboundtraffic|MyOrg|MyEnv
     */
	public EnvironmentRatio(String environment) {
        super(environment);
    }

    // =========================================================================
    // Methods
    // =========================================================================

	public void setResponseCount(long responseCount) {
        // environment => we have to aggregate the responses generated by each API
		if (responseCount < 0L) {
			throw new IllegalArgumentException("Epected positive argument, received: " + responseCount);
		}
        super.responseCount += responseCount;
    }

    @Override
    public void setRequestCount(long requestCount) {
        // environment => we have to aggregate the requests hitting each API
    	if (requestCount < 0L) {
			throw new IllegalArgumentException("Epected positive argument, received: " + requestCount);
		}
        this.requestCount += requestCount;
    }

    @Override
    public void setResponseSentXXX(String responseSentXXX, long value) {
        // aggregate all responses of type 2XX, 3XX, etc.
    	if (value < 0L) {
			throw new IllegalArgumentException("Epected positive argument, received: " + value);
		}
        super.map.merge(responseSentXXX, value, Long::sum);
    }
}
